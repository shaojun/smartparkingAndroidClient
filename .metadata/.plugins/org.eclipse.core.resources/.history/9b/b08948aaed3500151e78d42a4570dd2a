package com.example.fenix3notificationproxy;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sourceforge.pinyin4j.PinyinHelper;
import net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;
import net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;
import net.sourceforge.pinyin4j.format.HanyuPinyinToneType;
import net.sourceforge.pinyin4j.format.HanyuPinyinVCharType;
import net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;
import android.annotation.SuppressLint;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.service.notification.NotificationListenerService;
import android.service.notification.StatusBarNotification;
import android.support.v4.app.NotificationCompat;
import android.util.Log;

public class Fenix3NotificationListenerService extends
		NotificationListenerService {
	private String logTag = "Fenix3NotificationListenerService";
	private Map<String, String> InterstedNotificationPackageNames = new HashMap<String, String>();
	private final int notificationId = 19831004;

	public Fenix3NotificationListenerService() {
		// packagename:nickname
		if (!InterstedNotificationPackageNames
				.containsKey("com.tencent.mobileqq")) {
			InterstedNotificationPackageNames.put("com.tencent.mobileqq", "QQ");
		}

		if (!InterstedNotificationPackageNames.containsKey("com.tencent.mm")) {
			InterstedNotificationPackageNames.put("com.tencent.mm", "WeChat");
		}
		
		InterstedNotificationPackageNames.put("com.android.mms", "SMS");

		List<String> allDialer = this.GetAllDialerPackageName();
		for (String dialer : allDialer) {
			if (!InterstedNotificationPackageNames.containsKey(dialer)) {
				InterstedNotificationPackageNames.put(dialer, "Call");
				Log.e(logTag, "add new dialer: " + dialer);
			}
		}
	}

	@Override
	public void onNotificationPosted(StatusBarNotification sbn) {
		Notification mNotification = sbn.getNotification();
		Bundle extras = mNotification.extras;
		String notificationTitle = extras.getString(Notification.EXTRA_TITLE);
		int notificationIcon = extras.getInt(Notification.EXTRA_SMALL_ICON);
		// Bitmap notificationLargeIcon =
		// ((Bitmap) extras.getParcelable(Notification.EXTRA_LARGE_ICON));
		CharSequence notificationText = extras
				.getCharSequence(Notification.EXTRA_TEXT);
		CharSequence notificationSubText = extras
				.getCharSequence(Notification.EXTRA_SUB_TEXT);
		final String packagename = String.valueOf(sbn.getPackageName());
		final String fullText = notificationTitle + ": "
				+ String.valueOf(notificationText);

		String friendPackagename = "";
		if (!InterstedNotificationPackageNames.containsKey(packagename)
				|| (fullText.equals("[]") && !packagename
						.equals("com.android.dialer"))) {
			Log.e(logTag, "Ignore notification with content: " + fullText
					+ " from packageName: " + packagename);
			return;
		}

		friendPackagename = InterstedNotificationPackageNames.get(packagename);
		Log.e(logTag, "capatured notfication with content: " + fullText
				+ " from packageName: " + packagename + "(" + friendPackagename
				+ ")");

		String fullPinyin = getFullPinYin(fullText);
		Log.e(logTag, "fullPinyin: " + fullPinyin);

		Intent dismissIntent = new Intent(this, MainActivity.class);
		// dismissIntent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP
		// | Intent.FLAG_ACTIVITY_CLEAR_TOP);
		dismissIntent.putExtra("action", "dismiss");
		dismissIntent.putExtra("notificationId", notificationId);
		dismissIntent.putExtra("from", friendPackagename);
		dismissIntent.putExtra("text", fullPinyin);
		PendingIntent dismissPendingIntent = PendingIntent.getActivity(this, 0,
				dismissIntent, 0);

		// Intent readMoreIntent = new Intent(this, MainActivity.class);
		// readMoreIntent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP
		// | Intent.FLAG_ACTIVITY_CLEAR_TOP);
		// readMoreIntent.putExtra("action", "readMore");
		// readMoreIntent.putExtra("notificationId", notificationId);
		// readMoreIntent.putExtra("from", packagename);
		// readMoreIntent.putExtra("text", String.valueOf(event.getText()));
		// PendingIntent readMorePendingIntent = PendingIntent.getActivity(
		// this, 0, readMoreIntent, PendingIntent.FLAG_UPDATE_CURRENT);
		// build notification
		// the addAction re-use the same intent to keep the example short
		Notification n = new NotificationCompat.Builder(this)
				.setContentTitle(friendPackagename)
				.setContentText(fullPinyin)
				.setSmallIcon(getNotificationIcon())
				.setLargeIcon(
						BitmapFactory.decodeResource(getResources(),
								R.drawable.small_icon0))
				.setColor(Color.argb(255, 153, 51, 255))
				// .setNumber(5)
				.setContentIntent(dismissPendingIntent).setAutoCancel(true)
				// .addAction(R.drawable.small_icon0, "More",
				// readMorePendingIntent)
				// .addAction(R.drawable.small_icon0, "Dismiss all",
				// dismissPendingIntent)
				.build();
		n.flags |= Notification.FLAG_AUTO_CANCEL;
		NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
		notificationManager.notify(notificationId, n);
		waitSometimeHandler.removeCallbacks(this.removeSelfNotificationRunable);
		waitSometimeHandler.postDelayed(removeSelfNotificationRunable, 90000);
	}

	Runnable removeSelfNotificationRunable = new Runnable() {
		@Override
		public void run() {
			NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
			notificationManager.cancel(notificationId);
		}
	};

	private Handler waitSometimeHandler = new Handler();

	private int getNotificationIcon() {
		boolean whiteIcon = (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP);
		return whiteIcon ? R.drawable.small_icon0 : R.drawable.ic_launcher;
	}

	private List<String> GetAllDialerPackageName() {
		// Ask the PackageManager to return a list of Activities that support
		// ACTION_DIAL
		PackageManager pm = getPackageManager();
		Intent intent = new Intent(Intent.ACTION_DIAL);
		List<ResolveInfo> list = pm.queryIntentActivities(intent, 0);
		List<String> packageList = new ArrayList<String>();
		if (list != null) {
			// For each entry in the returned list, get the package name and add
			// that to a list (ignore duplicates)
			for (ResolveInfo r : list) {
				String packageName = r.activityInfo.packageName;
				if (!packageList.contains(packageName)) {
					packageList.add(packageName);
				}
			}
		}

		return packageList;
	}

	private String getFullPinYin(String source) {
		HanyuPinyinOutputFormat format = new HanyuPinyinOutputFormat();
		format.setCaseType(HanyuPinyinCaseType.LOWERCASE);
		format.setToneType(HanyuPinyinToneType.WITHOUT_TONE);
		format.setVCharType(HanyuPinyinVCharType.WITH_U_UNICODE);
		char[] input = source.trim().toCharArray();
		StringBuffer output = new StringBuffer("");

		try {
			for (int i = 0; i < input.length; i++) {
				if (Character.toString(input[i]).matches("[\u4E00-\u9FA5]+")) {
					String[] temp = PinyinHelper.toHanyuPinyinStringArray(
							input[i], format);
					output.append(temp[0]);
					output.append(" ");
				} else
					output.append(Character.toString(input[i]));
			}
		} catch (BadHanyuPinyinOutputFormatCombination e) {
			e.printStackTrace();
		}

		try {
			byte[] asciiBytes = output.toString().getBytes("US-ASCII");
			String asciiEncodeString = new String(asciiBytes, "US-ASCII");
			return asciiEncodeString;
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return "Error!";
	}

	public static boolean isNotificationAccessEnabled = false;

	@Override
	public IBinder onBind(Intent mIntent) {
		IBinder mIBinder = super.onBind(mIntent);
		isNotificationAccessEnabled = true;
		return mIBinder;
	}

	@Override
	public boolean onUnbind(Intent mIntent) {
		boolean mOnUnbind = super.onUnbind(mIntent);
		isNotificationAccessEnabled = false;
		return mOnUnbind;
	}

	@Override
	public void onNotificationRemoved(StatusBarNotification sbn) {
		// TAG = "onNotificationRemoved";
		// Log.d(TAG, "id = " + sbn.getId() + "Package Name" +
		// sbn.getPackageName() +
		// "Post time = " + sbn.getPostTime() + "Tag = " + sbn.getTag());

	}
}
