package com.example.myfirstandroidapp;

import android.app.Activity;
import android.content.Intent;
import android.location.Location;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.RadioGroup;
import android.widget.TextView;

import com.amap.api.maps.AMap;
import com.amap.api.maps.CameraUpdateFactory;
import com.amap.api.maps.LocationSource;
import com.amap.api.maps.MapView;
import com.amap.api.maps.UiSettings;
import com.amap.api.maps.model.BitmapDescriptorFactory;
import com.amap.api.maps.model.LatLng;
import com.amap.api.maps.model.Marker;
import com.amap.api.maps.model.MarkerOptions;
import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationListener;
import com.amap.api.location.LocationManagerProxy;
import com.amap.api.location.LocationProviderProxy;
import com.amapv2.apis.util.AMapUtil;
import com.amapv2.apis.util.Constants;
import com.amapv2.apis.util.ToastUtil;

/**
 * AMapV2地图中简单介绍一些Marker的用法.
 */
public class OverviewParkingPositionActivity extends Activity implements
		AMapLocationListener, Runnable {
	private AMap aMap;
	private MapView mapView;
	private UiSettings mUiSettings;
	private TextView myLocation;
	private LatLng latlng = new LatLng(36.061, 103.834);
	private String desc;
	private LocationManagerProxy aMapLocManager;
	private AMapLocation aMapLocation;// 用于判断定位超时
	private Handler handler = new Handler();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_overviewparkingposition);
		Intent intent = getIntent();
		this.desc = intent.getStringExtra("desc");
		myLocation = (TextView) findViewById(R.id.myLocation);
		mapView = (MapView) findViewById(R.id.map);
		mapView.onCreate(savedInstanceState); // 此方法必须重写
		init();

		aMapLocManager = LocationManagerProxy.getInstance(this);
		/*
		 * mAMapLocManager.setGpsEnable(false);//
		 * 1.0.2版本新增方法，设置true表示混合定位中包含gps定位，false表示纯网络定位，默认是true Location
		 * API定位采用GPS和网络混合定位方式
		 * ，第一个参数是定位provider，第二个参数时间最短是2000毫秒，第三个参数距离间隔单位是米，第四个参数是定位监听者
		 */
		aMapLocManager.setGpsEnable(true);
		aMapLocManager.requestLocationUpdates(
				LocationProviderProxy.AMapNetwork, 2000, 10, this);
		handler.postDelayed(this, 20000);// 设置超过12秒还没有定位到就停止定位
	}

	/**
	 * 初始化AMap对象
	 */
	private void init() {

		if (aMap == null) {
			aMap = mapView.getMap();
			mUiSettings = aMap.getUiSettings();
			mUiSettings.setCompassEnabled(true);
			mUiSettings.setMyLocationButtonEnabled(true); // 是否显示默认的定位按钮
			aMap.setMyLocationEnabled(true);// 是否可触发定位并显示定位层
		}
	}

	/**
	 * 方法必须重写
	 */
	@Override
	protected void onResume() {
		super.onResume();
		mapView.onResume();
	}

	/**
	 * 方法必须重写
	 */
	@Override
	protected void onPause() {
		super.onPause();
		mapView.onPause();
	}

	/**
	 * 方法必须重写
	 */
	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		mapView.onSaveInstanceState(outState);
	}

	public void addMarkers(View view) {
		this.addMarkersToMap();
	}

	/**
	 * 在地图上添加marker
	 */
	private void addMarkersToMap() {

		// 设置远小近大效果,2.1.0 版本新增；设置刷新一次图片资源的周期。
		Marker CHENGDU = aMap.addMarker(new MarkerOptions().anchor(0.5f, 0.5f)
				.position(this.latlng).title(this.desc)
				.snippet("成都市:30.679879, 104.064855").perspective(true)
				.draggable(false).period(50));
		CHENGDU.showInfoWindow();
		// 设置默认显示一个 infowinfow
		// markerOption = new MarkerOptions();
		// markerOption.position(Constants.XIAN);
		// markerOption.title("西安市").snippet("西安市：34.341568, 108.940174");
		// markerOption.perspective(true);
		// markerOption.draggable(false);
		// markerOption.icon(BitmapDescriptorFactory.fromResource(R.drawable.arrow));
		// Marker XIAN = aMap.addMarker(markerOption);
		// 添加带有系统默认 icon 的 marker
		// drawMarkers();
	}

	public void drawMarkers() {
		Marker marker = aMap.addMarker(new MarkerOptions()
				.position(latlng)
				.title("好好学习")
				.icon(BitmapDescriptorFactory
						.defaultMarker(BitmapDescriptorFactory.HUE_AZURE))
				.perspective(true).draggable(true));
		marker.setRotateAngle(90);// 设置marker旋转90度
		marker.showInfoWindow();// 设置默认显示一个infowinfow
	}

	@Override
	public void onProviderDisabled(String arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderEnabled(String arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onStatusChanged(String arg0, int arg1, Bundle arg2) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onLocationChanged(AMapLocation location) {
		if (location != null) {
			this.aMapLocation = location;// 判断超时机制
			Double geoLat = location.getLatitude();
			Double geoLng = location.getLongitude();
			this.latlng = new LatLng(geoLat, geoLng);
			String cityCode = "";
			String desc = "";
			Bundle locBundle = location.getExtras();
			if (locBundle != null) {
				cityCode = locBundle.getString("citycode");
				desc = locBundle.getString("desc");
			}
			String str = ("定位成功:(" + geoLng + "," + geoLat + ")"
					+ "\n精    度    :" + location.getAccuracy() + "米"
					+ "\n定位方式:" + location.getProvider() + "\n定位时间:"
					+ AMapUtil.convertToTime(location.getTime()) + "\n城市编码:"
					+ cityCode + "\n位置描述:" + desc + "\n省:"
					+ location.getProvince() + "\n市:" + location.getCity()
					+ "\n区(县):" + location.getDistrict() + "\n区域编码:" + location
					.getAdCode());
			myLocation.setText(str);
			aMap.moveCamera(CameraUpdateFactory.newLatLngZoom(this.latlng, 30));
		}
	}

	@Override
	public void run() {
		if (aMapLocation == null) {
			ToastUtil.show(this, "12秒内还没有定位成功，停止定位");
			myLocation.setText("12秒内还没有定位成功，停止定位");
			stopLocation();// 销毁掉定位
		}
	}

	private void stopLocation() {
		if (aMapLocManager != null) {
			aMapLocManager.removeUpdates(this);
			aMapLocManager.destory();
		}
		aMapLocManager = null;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub

	}
}
